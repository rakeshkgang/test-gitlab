name: Development CI/CD Pipeline

permissions:
  id-token: write   
  contents: read

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2"
  DOCKER_IMAGE_NAME: ghcr.io/${{ github.repository }}/mail-me
  APP_NAME: mail-me
  SONAR_USER_HOME: ".sonar"
  GIT_DEPTH: "0"
  SONAR_COMMAND: mvn verify sonar:sonar -Dsonar.projectKey=alpha-serve_cl-mailme
  MAVEN_DOCKER_IMAGE: maven:3.9.6-amazoncorretto-17-debian
  ENV_NAME: "dev"
  CI_ENV_NAME: "dev"

jobs:
  sonarcloud-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ${{ env.SONAR_USER_HOME }}/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: .m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # SonarCloud Analysis (currently commented out)
      # - name: Run SonarCloud Analysis
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: ${{ env.SONAR_COMMAND }}

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: .m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -P${{ env.ENV_NAME }} clean install

      # Upload build artifacts (optional - commented out)
      # - name: Upload artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: backend-jar
      #     path: backend/target/*.jar

  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Download artifact if you uploaded it (currently not uploading)
      # - name: Download artifact
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: backend-jar
      #     path: backend/target/

      # Docker login to GHCR (commented out)
      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image (commented out)
      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.ENV_NAME }}

  # Deployment job (fully commented out)
  # deploy:
  #   needs: package
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install SSH key
  #       uses: shimataro/ssh-key-action@v2
  #       with:
  #         key: ${{ env.SSH_PRIVATE_KEY }}
  #         known_hosts: unnecessary
  #         if_key_exists: replace

  #     - name: Add host to known_hosts
  #       run: |
  #         mkdir -p ~/.ssh
  #         ssh-keyscan ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts
  #         chmod 644 ~/.ssh/known_hosts
  #         echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

  #     - name: Prepare deployment files
  #       run: |
  #         export APP_NAME=${APP_NAME}-${ENV_NAME}
  #         export PATH_TO_BASEDIR=/opt/${APP_NAME}-cloud
  #         export TMP_DIR=/tmp/${APP_NAME}
  #         # Prepare your .env and Nginx SSL config here

  #     - name: Deploy to server
  #       run: |
  #         # All deployment SSH/rsync/docker-compose steps here

  #     - name: Wait for containers
  #       run: |
  #         # Wait for containers and health checks
